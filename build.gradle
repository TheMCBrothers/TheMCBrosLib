plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.+'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.+'
}

version = "$minecraft_version-$mod_version"
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_base_name
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }

    withSourcesJar()
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    data {
        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:$neo_version"
}

tasks.named('jar', Jar).configure {
    exclude 'net/themcbrothers/lib/datagen/**'
    manifest {
        attributes([
                "Specification-Title"     : "tmcb_lib",
                "Specification-Vendor"    : "TheMCBrothers",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : jar.archiveVersion,
                "Implementation-Vendor"   : "TheMCBrothers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.named('sourcesJar', Jar).configure {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
    exclude 'net/themcbrothers/lib/datagen/**'
}

artifacts {
    archives tasks.jar
    archives tasks.sourcesJar
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: version,
            mod_authors         : mod_authors, mod_description: mod_description, mod_credits: mod_credits,
            curse_project       : curse_project, github_repo: github_repo,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// publishing on NEXUS
publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifact(jar)
            publication.artifact(sourcesJar)
            publication.version("$project.version")
            publication.artifactId("$project.mod_base_name")
        }
    }
    repositories {
        maven {
            credentials {
                username = providers.environmentVariable('nexus_uname')
                password = providers.environmentVariable('nexus_pwd')
            }

            if (version.endsWith('-SNAPSHOT')) {
                url 'https://nexus.themcbrothers.net/repository/maven-snapshots/'
            } else {
                url 'https://nexus.themcbrothers.net/repository/maven-releases/'
            }
        }
    }
}

var curseForgeKey = providers.environmentVariable('cf_key')
var modrinthToken = providers.environmentVariable('modrinth_token')

publishMods {
    file = tasks.jar.archiveFile
    type = artifact_type == 'release' ? STABLE : artifact_type == 'beta' ? BETA : ALPHA

    modLoaders.add("neoforge")

    // Publish to CurseForge
    if (curseForgeKey.isPresent()) {
        curseforge {
            accessToken = curseForgeKey
            projectId = curse_project
            minecraftVersions.add(minecraft_version)
        }
    }

    // Publish to Modrinth
    if (modrinthToken.isPresent()) {
        modrinth {
            accessToken = modrinthToken
            projectId = modrinth_project
            displayName = version
            minecraftVersions.add(minecraft_version)
            additionalFiles.from(tasks.sourcesJar.archiveFile)
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
