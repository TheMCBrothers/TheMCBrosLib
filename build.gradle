plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0, 6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.+'
}

group = "net.themcbrothers"
version = "$minecraft_version-$mod_version"

base {
    archivesName = "TheMCBrosLib"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }

    withSourcesJar()
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                tmcb_lib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                tmcb_lib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'tmcb_lib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                tmcb_lib {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    filesMatching('META-INF/mods.toml') {
        expand 'file': ['jarVersion': version],
                'loader_version_range': loader_version_range,
                'forge_version_range': forge_version_range,
                'minecraft_version_range': minecraft_version_range
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    // Mod dependencies
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    exclude 'net/themcbrothers/lib/datagen/**'
    manifest {
        attributes([
                "Specification-Title"     : "tmcb_lib",
                "Specification-Vendor"    : "TheMCBrothers",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : jar.archiveVersion,
                "Implementation-Vendor"   : "TheMCBrothers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

sourcesJar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
    exclude 'net/themcbrothers/lib/datagen/**'
}

artifacts {
    archives tasks.jar
    archives tasks.sourcesJar
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

// publishing on NEXUS
publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifact(jar)
            publication.artifact(sourcesJar)
            publication.version("$project.version")
            publication.artifactId("TheMCBrosLib")
        }
    }
    repositories {
        maven {
            credentials {
                username = providers.environmentVariable('nexus_uname')
                password = providers.environmentVariable('nexus_pwd')
            }

            if (version.endsWith('-SNAPSHOT')) {
                url 'https://nexus.themcbrothers.net/repository/maven-snapshots/'
            } else {
                url 'https://nexus.themcbrothers.net/repository/maven-releases/'
            }
        }
    }
}

var curseForgeKey = providers.environmentVariable('cf_key')
var modrinthToken = providers.environmentVariable('modrinth_token')

publishMods {
    file = jar.archiveFile
    type = artifact_type == 'release' ? STABLE : artifact_type == 'beta' ? BETA : ALPHA

    modLoaders.add("forge")

    // Publish to CurseForge
    if (curseForgeKey.isPresent()) {
        curseforge {
            accessToken = curseForgeKey
            projectId = curse_project
            minecraftVersions.add(minecraft_version)
        }
    }

    // Publish to Modrinth
    if (modrinthToken.isPresent()) {
        modrinth {
            accessToken = modrinthToken
            projectId = modrinth_project
            displayName = version
            minecraftVersions.add(minecraft_version)
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
