plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

archivesBaseName = "TheMCBrosLib"
group = "net.themcbrothers"
version = "$project.mc_version-$project.mod_version"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: project.mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                tmcb_lib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                tmcb_lib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'tmcb_lib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                tmcb_lib {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Mod dependencies
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "tmcb_lib",
                "Specification-Vendor"    : "TheMCBrothers",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "TheMCBrothers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

private String getSecret(String key) {
    File secretFile = file('secrets.properties')
    if (secretFile.canRead()) {
        Properties secretProps = new Properties()
        secretProps.load(new FileInputStream(secretFile))
        return secretProps.getProperty(key).toString()
    }
    return null
}

// publishing on NEXUS
publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifacts = [jar]
            publication.version = "$project.version"
            publication.artifactId = "TheMCBrosLib"
        }
    }
    repositories {
        maven {
            credentials {
                username = getSecret('nexus_uname')
                password = getSecret('nexus_pwd')
            }

            if (project.version.endsWith('-SNAPSHOT')) {
                url 'https://nexus.themcbrothers.net/repository/maven-snapshots/'
            } else {
                url 'https://nexus.themcbrothers.net/repository/maven-releases/'
            }
        }
    }
}

// publishing on CurseForge
curseforge {
    apiKey = getSecret('cf_key')

    project {
        id = project.project_id
        changelog = 'No Changelog provided'
        releaseType = project.artifact_type
        addGameVersion(project.mc_version)
        mainArtifact jar
    }
}

tasks.named("curseforge") { finalizedBy("publish") }